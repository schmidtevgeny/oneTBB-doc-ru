# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Intel Corporation
# This file is distributed under the same license as the oneTBB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: oneTBB\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-23 14:08+0300\n"
"PO-Revision-Date: 2022-03-20 20:38+0300\n"
"Last-Translator: Evgeny <schmidte@list.ru>\n"
"Language-Team: \n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : 2);\n"
"Generated-By: Babel 2.9.1\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../oneTBB/doc/main/tbb_userguide/Exceptions_and_Cancellation.rst:4
msgid "Exceptions and Cancellation"
msgstr "Исключения и отмена"

#: ../../oneTBB/doc/main/tbb_userguide/Exceptions_and_Cancellation.rst:7
msgid "|full_name| supports exceptions and cancellation. When code inside an oneTBB algorithm throws an exception, the following steps generally occur:"
msgstr "|full_name| поддерживает исключения и отмену. Когда код внутри алгоритма oneTBB выбрасывает исключение, обычно происходят следующие действия:"

#: ../../oneTBB/doc/main/tbb_userguide/Exceptions_and_Cancellation.rst:12
msgid "The exception is captured. Any further exceptions inside the algorithm are ignored."
msgstr "Исключение фиксируется. Любые дальнейшие исключения внутри алгоритма игнорируются."

#: ../../oneTBB/doc/main/tbb_userguide/Exceptions_and_Cancellation.rst:16
msgid "The algorithm is cancelled. Pending iterations are not executed. If there is oneTBB parallelism nested inside, the nested parallelism may also be cancelled as explained in :ref:`Cancellation_and_Nested_Parallelism`."
msgstr "Алгоритм отменяется. Ожидающие итерации не выполняются. Если внутри вложен один параллелизм TBB, то вложенный параллелизм также может быть отменен, как объясняется в :ref:`Cancellation_and_Nested_Parallelism`."

#: ../../oneTBB/doc/main/tbb_userguide/Exceptions_and_Cancellation.rst:21
msgid "Once all parts of the algorithm stop, an exception is thrown on the thread that invoked the algorithm."
msgstr "Как только все части алгоритма останавливаются, на поток, который вызвал алгоритм, выбрасывается исключение."

#: ../../oneTBB/doc/main/tbb_userguide/Exceptions_and_Cancellation.rst:25
msgid "The exception thrown in step 3 might be the original exception, or might merely be a summary of type ``captured_exception``. The latter usually occurs on current systems because propagating exceptions between threads requires support for the C++ ``std::exception_ptr`` functionality. As compilers evolve to support this functionality, future versions of oneTBB might throw the original exception. So be sure your code can catch either type of exception. The following example demonstrates exception handling."
msgstr "Исключение, брошенное на шаге 3, может быть исходным исключением, а может быть просто обобщением типа ``captured_exception``. Последнее обычно происходит в современных системах, потому что распространение исключений между потоками требует поддержки функциональности C++ ``std::exception_ptr``. По мере развития компиляторов, поддерживающих эту функциональность, будущие версии oneTBB могут выбрасывать оригинальное исключение. Поэтому убедись, что твой код может перехватить любой тип исключения. Следующий пример демонстрирует обработку исключений."

#: ../../oneTBB/doc/main/tbb_userguide/Exceptions_and_Cancellation.rst:38
msgid ""
"#include \"oneapi/tbb.h\"\n"
"#include <vector>\n"
"#include <iostream>\n"
"\n"
"\n"
"using namespace oneapi::tbb;\n"
"using namespace std;\n"
"\n"
"\n"
"vector<int> Data;\n"
"\n"
"\n"
"struct Update {\n"
"    void operator()( const blocked_range<int>& r ) const {\n"
"        for( int i=r.begin(); i!=r.end(); ++i )\n"
"            Data.at(i) += 1;\n"
"    }\n"
"};\n"
"\n"
"\n"
"int main() {\n"
"    Data.resize(1000);\n"
"    try {\n"
"        parallel_for( blocked_range<int>(0, 2000), Update());\n"
"    } catch( out_of_range& ex ) {\n"
"       cout << \"out_of_range: \" << ex.what() << endl;\n"
"    }\n"
"    return 0;\n"
"}"
msgstr ""
"#include \"oneapi/tbb.h\"\n"
"#include <vector>\n"
"#include <iostream>\n"
"\n"
"\n"
"using namespace oneapi::tbb;\n"
"using namespace std;\n"
"\n"
"\n"
"vector<int> Data;\n"
"\n"
"\n"
"struct Update {\n"
"    void operator()( const blocked_range<int>& r ) const {\n"
"        for( int i=r.begin(); i!=r.end(); ++i )\n"
"            Data.at(i) += 1;\n"
"    }\n"
"};\n"
"\n"
"\n"
"int main() {\n"
"    Data.resize(1000);\n"
"    try {\n"
"        parallel_for( blocked_range<int>(0, 2000), Update());\n"
"    } catch( out_of_range& ex ) {\n"
"       cout << \"out_of_range: \" << ex.what() << endl;\n"
"    }\n"
"    return 0;\n"
"}"

#: ../../oneTBB/doc/main/tbb_userguide/Exceptions_and_Cancellation.rst:69
msgid "The ``parallel_for`` attempts to iterate over 2000 elements of a vector with only 1000 elements. Hence the expression ``Data.at(i)`` sometimes throws an exception ``std::out_of_range`` during execution of the algorithm. When the exception happens, the algorithm is cancelled and an exception thrown at the call site to ``parallel_for``."
msgstr "Алгоритм ``parallel_for`` пытается выполнить итерацию над 2000 элементами вектора, состоящего всего из 1000 элементов. Поэтому выражение ``Data.at(i)`` иногда выбрасывает исключение ``std::out_of_range`` во время выполнения алгоритма. Когда такое исключение происходит, алгоритм отменяется и исключение выбрасывается в месте вызова ``parallel_for``."
