# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Intel Corporation
# This file is distributed under the same license as the oneTBB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: oneTBB \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-23 14:08+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../oneTBB/doc/main/tbb_userguide/use_graph_reset.rst:4
msgid "Use graph::reset() to Reset a Canceled Graph"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/use_graph_reset.rst:7
msgid ""
"When a graph execution is canceled either because of an unhandled "
"exception or because its task_group_context is canceled explicitly, the "
"graph and its nodes may be left in an indeterminate state. For example, "
"in the code samples shown in :ref:`cancel_a_graph` the input 2 may be "
"left in a buffer. But even beyond remnants in the buffers, there are "
"other optimizations performed during the execution of a flow graph that "
"can leave its nodes and edges in an indeterminate state. If you want to "
"re-execute or restart a graph, you first need to reset the graph:"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/use_graph_reset.rst:20
msgid ""
"try {\n"
"    g.wait_for_all();\n"
"} catch ( int j ) {\n"
"    cout << \"Caught \" << j << \"\\n\";\n"
"    // do something to fix the problem\n"
"    g.reset();\n"
"    f1.try_put(1);\n"
"    f1.try_put(2);\n"
"    g.wait_for_all();\n"
"}"
msgstr ""

