# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Intel Corporation
# This file is distributed under the same license as the oneTBB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: oneTBB \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-23 14:08+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../oneTBB/doc/main/tbb_userguide/cancel_a_graph.rst:4
msgid "Cancel a Graph Explicitly"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/cancel_a_graph.rst:7
msgid ""
"To cancel a graph execution without an exception, you can create the "
"graph using an explicit task_group_context, and then call "
"cancel_group_execution() on that object. This is done in the example "
"below:"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/cancel_a_graph.rst:16
msgid ""
"task_group_context t;\n"
"graph g(t);\n"
"\n"
"\n"
"function_node< int, int > f1( g, 1, []( int i ) {  return i; } );\n"
"\n"
"\n"
"function_node< int, int > f2( g, 1,\n"
"    []( const int i ) -> int {\n"
"        cout << \"Begin \" << i << \"\\n\";\n"
"        spin_for(0.2);\n"
"        cout << \"End \" << i << \"\\n\";\n"
"        return i;\n"
"} );\n"
"\n"
"\n"
"function_node< int, int > f3( g, 1, []( int i ) {  return i; } );\n"
"\n"
"\n"
"make_edge( f1, f2 );\n"
"make_edge( f2, f3 );\n"
"f1.try_put(1);\n"
"f1.try_put(2);\n"
"spin_for(0.1);\n"
"t.cancel_group_execution();\n"
"g.wait_for_all();"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/cancel_a_graph.rst:44
msgid ""
"When a graph execution is canceled, any node that has already started to "
"execute will execute to completion, but any node that has not started to "
"execute will not start. So in the example above, f2 will print both the "
"Begin and End message for input 1, but will not receive the input 2."
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/cancel_a_graph.rst:50
msgid ""
"You can also get the task_group_context that a node belongs to from "
"within the node body and use it to cancel the execution of the graph it "
"belongs to:"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/cancel_a_graph.rst:58
msgid ""
"graph g;\n"
"\n"
"\n"
"function_node< int, int > f1( g, 1, []( int i ) {  return i; } );\n"
"\n"
"\n"
"function_node< int, int > f2( g, 1,\n"
"    []( const int i ) -> int {\n"
"     cout << \"Begin \" << i << \"\\n\";\n"
"     spin_for(0.2);\n"
"        cout << \"End \" << i << \"\\n\";\n"
"        task::self().group()->cancel_group_execution();\n"
"        return i;\n"
"} );\n"
"\n"
"\n"
"function_node< int, int > f3( g, 1, []( int i ) {  return i; } );\n"
"\n"
"\n"
"make_edge( f1, f2 );\n"
"make_edge( f2, f3 );\n"
"f1.try_put(1);\n"
"f1.try_put(2);\n"
"g.wait_for_all();"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/cancel_a_graph.rst:84
msgid ""
"You can get the task_group_context from a node's body even if the graph "
"was not explicitly passed one at construction time."
msgstr ""

