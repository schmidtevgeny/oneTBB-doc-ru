# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Intel Corporation
# This file is distributed under the same license as the oneTBB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: oneTBB \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-23 14:08+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../oneTBB/doc/main/tbb_userguide/concurrent_hash_map.rst:4
msgid "concurrent_hash_map"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/concurrent_hash_map.rst:7
msgid ""
"A ``concurrent_hash_map<Key, T, HashCompare >`` is a hash table that "
"permits concurrent accesses. The table is a map from a key to a type "
"``T``. The traits type HashCompare defines how to hash a key and how to "
"compare two keys."
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/concurrent_hash_map.rst:13
msgid ""
"The following example builds a ``concurrent_hash_map`` where the keys are"
" strings and the corresponding data is the number of times each string "
"occurs in the array ``Data``."
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/concurrent_hash_map.rst:21
#, python-format
msgid ""
"#include \"oneapi/tbb/concurrent_hash_map.h\"\n"
"#include \"oneapi/tbb/blocked_range.h\"\n"
"#include \"oneapi/tbb/parallel_for.h\"\n"
"#include <string>\n"
"\n"
"\n"
"using namespace oneapi::tbb;\n"
"using namespace std;\n"
"\n"
"\n"
"// Structure that defines hashing and comparison operations for user's "
"type.\n"
"struct MyHashCompare {\n"
"    static size_t hash( const string& x ) {\n"
"        size_t h = 0;\n"
"        for( const char* s = x.c_str(); *s; ++s )\n"
"            h = (h*17)^*s;\n"
"        return h;\n"
"    }\n"
"    //! True if strings are equal\n"
"    static bool equal( const string& x, const string& y ) {\n"
"        return x==y;\n"
"    }\n"
"};\n"
"\n"
"\n"
"// A concurrent hash table that maps strings to ints.\n"
"typedef concurrent_hash_map<string,int,MyHashCompare> StringTable;\n"
"\n"
"\n"
"// Function object for counting occurrences of strings.\n"
"struct Tally {\n"
"    StringTable& table;\n"
"    Tally( StringTable& table_ ) : table(table_) {}\n"
"    void operator()( const blocked_range<string*> range ) const {\n"
"        for( string* p=range.begin(); p!=range.end(); ++p ) {\n"
"            StringTable::accessor a;\n"
"            table.insert( a, *p );\n"
"            a->second += 1;\n"
"        }\n"
"    }\n"
"};\n"
"\n"
"\n"
"const size_t N = 1000000;\n"
"\n"
"\n"
"string Data[N];\n"
"\n"
"\n"
"void CountOccurrences() {\n"
"    // Construct empty table.\n"
"    StringTable table;\n"
"\n"
"\n"
"    // Put occurrences into the table\n"
"    parallel_for( blocked_range<string*>( Data, Data+N, 1000 ),\n"
"                  Tally(table) );\n"
"\n"
"\n"
"    // Display the occurrences\n"
"    for( StringTable::iterator i=table.begin(); i!=table.end(); ++i )\n"
"        printf(\"%s %d\\n\",i->first.c_str(),i->second);\n"
"}"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/concurrent_hash_map.rst:86
msgid ""
"A ``concurrent_hash_map`` acts as a container of elements of type "
"``std::pair<const Key,T>``. Typically, when accessing a container "
"element, you are interested in either updating it or reading it. The "
"template class ``concurrent_hash_map`` supports these two purposes "
"respectively with the classes ``accessor`` and ``const_accessor`` that "
"act as smart pointers. An *accessor* represents *update* (*write*) "
"access. As long as it points to an element, all other attempts to look up"
" that key in the table block until the ``accessor`` is done. A "
"``const_accessor`` is similar, except that is represents *read-only* "
"access. Multiple ``const_accessors`` can point to the same element at the"
" same time. This feature can greatly improve concurrency in situations "
"where elements are frequently read and infrequently updated."
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/concurrent_hash_map.rst:100
msgid ""
"The methods ``find`` and ``insert`` take an ``accessor`` or "
"``const_accessor`` as an argument. The choice tells "
"``concurrent_hash_map`` whether you are asking for *update* or *read-"
"only* access. Once the method returns, the access lasts until the "
"``accessor`` or ``const_accessor`` is destroyed. Because having access to"
" an element can block other threads, try to shorten the lifetime of the "
"``accessor`` or ``const_accessor``. To do so, declare it in the innermost"
" block possible. To release access even sooner than the end of the block,"
" use method ``release``. The following example is a rework of the loop "
"body that uses ``release`` instead of depending upon destruction to end "
"thread lifetime:"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/concurrent_hash_map.rst:116
msgid ""
"StringTable accessor a;\n"
"for( string* p=range.begin(); p!=range.end(); ++p ) {\n"
"    table.insert( a, *p );\n"
"    a->second += 1;\n"
"    a.release();\n"
"}"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/concurrent_hash_map.rst:124
msgid ""
"The method ``remove(key)`` can also operate concurrently. It implicitly "
"requests write access. Therefore before removing the key, it waits on any"
" other extant accesses on ``key``."
msgstr ""

