# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Intel Corporation
# This file is distributed under the same license as the oneTBB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: oneTBB\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-23 14:08+0300\n"
"PO-Revision-Date: 2022-03-20 19:22+0300\n"
"Last-Translator: Evgeny <schmidte@list.ru>\n"
"Language-Team: \n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : 2);\n"
"Generated-By: Babel 2.9.1\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:4
msgid "Catching Exceptions Inside the Node that Throws the Exception"
msgstr "Перехват исключений внутри узла, который выбрасывает исключение"

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:7
msgid "If you catch an exception within the node's body, execution continues normally, as you might expect. If an exception is thrown but is not caught before it propagates beyond the node's body, the execution of all of the graph's nodes are canceled and the exception is rethrown at the call site of graph::wait_for_all(). Take the graph below as an example:"
msgstr "Если ты поймаешь исключение в теле узла, выполнение продолжится нормально, как ты и ожидал. Если исключение было выброшено, но не было поймано до того, как оно распространилось за пределы тела узла, выполнение всех узлов графа отменяется, и исключение будет повторно выброшено в месте вызова graph::wait_for_all(). Возьми в качестве примера приведенный ниже граф:"

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:17
msgid ""
"graph g;\n"
"\n"
"\n"
"function_node< int, int > f1( g, 1, []( int i ) {  return i; } );\n"
"\n"
"\n"
"function_node< int, int > f2( g, 1,\n"
"    []( const int i ) -> int {\n"
"    throw i;\n"
"    return i;\n"
"} );\n"
"\n"
"\n"
"function_node< int, int > f3( g, 1, []( int i ) {  return i; } );\n"
"\n"
"\n"
"make_edge( f1, f2 );\n"
"make_edge( f2, f3 );\n"
"f1.try_put(1);\n"
"f1.try_put(2);\n"
"g.wait_for_all();"
msgstr ""
"graph g;\n"
"\n"
"\n"
"function_node< int, int > f1( g, 1, []( int i ) {  return i; } );\n"
"\n"
"\n"
"function_node< int, int > f2( g, 1,\n"
"    []( const int i ) -> int {\n"
"    throw i;\n"
"    return i;\n"
"} );\n"
"\n"
"\n"
"function_node< int, int > f3( g, 1, []( int i ) {  return i; } );\n"
"\n"
"\n"
"make_edge( f1, f2 );\n"
"make_edge( f2, f3 );\n"
"f1.try_put(1);\n"
"f1.try_put(2);\n"
"g.wait_for_all();"

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:40
msgid "In the code above, the second function_node, f2, throws an exception that is not caught within the body. This will cause the execution of the graph to be canceled and the exception to be rethrown at the call to g.wait_for_all(). Since it is not handled there either, the program will terminate. If desirable, the exception could be caught and handled within the body:"
msgstr "В приведенном выше коде второй function_node, f2, выбрасывает исключение, которое не поймано внутри тела. Это приведет к тому, что выполнение графа будет отменено, а исключение будет повторно выброшено при вызове g.wait_for_all(). Поскольку оно не будет обработано и там, программа завершится. При желании исключение можно перехватить и обработать в теле программы:"

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:51
msgid ""
"function_node< int, int > f2( g, 1,\n"
"    []( const int i ) -> int {\n"
"        try {\n"
"            throw i;\n"
"        } catch (int j) {\n"
"            cout << \"Caught \" << j << \"\\n\";\n"
"        }\n"
"        return i;\n"
"} );"
msgstr ""
"function_node< int, int > f2( g, 1,\n"
"    []( const int i ) -> int {\n"
"        try {\n"
"            throw i;\n"
"        } catch (int j) {\n"
"            cout << \"Caught \" << j << \"\\n\";\n"
"        }\n"
"        return i;\n"
"} );"

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:62
msgid "If the exception is caught and handled in the body, then there is no effect on the overall execution of the graph. However, you could choose instead to catch the exception at the call to wait_for_all:"
msgstr "Если исключение поймано и обработано в теле, то это никак не влияет на общее выполнение графа. Однако ты можешь вместо этого перехватить исключение на этапе вызова wait_for_all:"

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:70
msgid ""
"try {\n"
"    g.wait_for_all();\n"
"} catch ( int j ) {\n"
"    cout << \"Caught \" << j << \"\\n\";\n"
"}"
msgstr ""
"try {\n"
"    g.wait_for_all();\n"
"} catch ( int j ) {\n"
"    cout << \"Caught \" << j << \"\\n\";\n"
"}"

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:77
msgid "In this case, the execution of the graph is canceled. For our example, this means that the input 1 never reaches f3 and that input 2 never reaches either f2 or f3."
msgstr "В этом случае выполнение графа отменяется. Для нашего примера это означает, что вход 1 никогда не достигнет f3, а вход 2 не достигнет ни f2, ни f3."
