# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Intel Corporation
# This file is distributed under the same license as the oneTBB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: oneTBB \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-23 14:08+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:4
msgid "Catching Exceptions Inside the Node that Throws the Exception"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:7
msgid ""
"If you catch an exception within the node's body, execution continues "
"normally, as you might expect. If an exception is thrown but is not "
"caught before it propagates beyond the node's body, the execution of all "
"of the graph's nodes are canceled and the exception is rethrown at the "
"call site of graph::wait_for_all(). Take the graph below as an example:"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:17
msgid ""
"graph g;\n"
"\n"
"\n"
"function_node< int, int > f1( g, 1, []( int i ) {  return i; } );\n"
"\n"
"\n"
"function_node< int, int > f2( g, 1,\n"
"    []( const int i ) -> int {\n"
"    throw i;\n"
"    return i;\n"
"} );\n"
"\n"
"\n"
"function_node< int, int > f3( g, 1, []( int i ) {  return i; } );\n"
"\n"
"\n"
"make_edge( f1, f2 );\n"
"make_edge( f2, f3 );\n"
"f1.try_put(1);\n"
"f1.try_put(2);\n"
"g.wait_for_all();"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:40
msgid ""
"In the code above, the second function_node, f2, throws an exception that"
" is not caught within the body. This will cause the execution of the "
"graph to be canceled and the exception to be rethrown at the call to "
"g.wait_for_all(). Since it is not handled there either, the program will "
"terminate. If desirable, the exception could be caught and handled within"
" the body:"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:51
msgid ""
"function_node< int, int > f2( g, 1,\n"
"    []( const int i ) -> int {\n"
"        try {\n"
"            throw i;\n"
"        } catch (int j) {\n"
"            cout << \"Caught \" << j << \"\\n\";\n"
"        }\n"
"        return i;\n"
"} );"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:62
msgid ""
"If the exception is caught and handled in the body, then there is no "
"effect on the overall execution of the graph. However, you could choose "
"instead to catch the exception at the call to wait_for_all:"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:70
msgid ""
"try {\n"
"    g.wait_for_all();\n"
"} catch ( int j ) {\n"
"    cout << \"Caught \" << j << \"\\n\";\n"
"}"
msgstr ""

#: ../../oneTBB/doc/main/tbb_userguide/catching_exceptions.rst:77
msgid ""
"In this case, the execution of the graph is canceled. For our example, "
"this means that the input 1 never reaches f3 and that input 2 never "
"reaches either f2 or f3."
msgstr ""

