# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Intel Corporation
# This file is distributed under the same license as the oneTBB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: oneTBB\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-23 14:08+0300\n"
"PO-Revision-Date: 2022-03-20 20:34+0300\n"
"Last-Translator: Evgeny <schmidte@list.ru>\n"
"Language-Team: \n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : 2);\n"
"Generated-By: Babel 2.9.1\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../oneTBB/doc/main/tbb_userguide/estimate_flow_graph_performance.rst:4
msgid "Estimating Flow Graph Performance"
msgstr "Оценка производительности графа потока"

#: ../../oneTBB/doc/main/tbb_userguide/estimate_flow_graph_performance.rst:7
msgid "The performance or scalability of a flow graph is not easy to predict. However there are a few key points that can guide you in estimating the limits on performance and speedup of some graphs."
msgstr "Производительность или масштабируемость графа потока предсказать нелегко. Однако есть несколько ключевых моментов, которыми ты можешь руководствоваться, оценивая пределы производительности и ускорения некоторых графов."

#: ../../oneTBB/doc/main/tbb_userguide/estimate_flow_graph_performance.rst
msgid "The Critical Path Limits the Scalability in a Dependence Graph"
msgstr "Критический путь ограничивает масштабируемость в графике зависимости"

#: ../../oneTBB/doc/main/tbb_userguide/estimate_flow_graph_performance.rst:19
msgid "A critical path is the most time consuming path from a node with no predecessors to a node with no successors. In a dependence graph, the execution of the nodes along a path cannot be overlapped since they have a strict ordering. Therefore, for a dependence graph, the critical path limits scalability."
msgstr "Критический путь - это наиболее трудоемкий путь от узла без предшественников до узла без преемников. В графе зависимостей выполнение узлов вдоль пути не может перекрываться, так как они имеют строгое упорядочивание. Поэтому для графа зависимостей критический путь ограничивает масштабируемость."

#: ../../oneTBB/doc/main/tbb_userguide/estimate_flow_graph_performance.rst:26
msgid "More formally, let T be the total time consumed by all of the nodes in your graph if executed sequentially. Then let C be the time consumed along the path that takes the most time. The nodes along this path cannot be overlapped even in a parallel execution. Therefore, even if all other paths are executed in parallel with C, the wall clock time for the parallel execution is at least C, and the maximum possible speedup (ignoring microarchitectural and memory effects) is T/C."
msgstr "Более формально, пусть T - это общее время, затрачиваемое всеми узлами твоего графа при последовательном выполнении. Тогда пусть C - это время, затраченное на путь, который занимает больше всего времени. Узлы вдоль этого пути не могут быть перекрыты даже при параллельном выполнении. Поэтому, даже если все остальные пути будут выполняться параллельно с C, время параллельного выполнения будет не меньше C, а максимально возможное ускорение (без учета микроархитектурных эффектов и эффектов памяти) составит T/C."

#: ../../oneTBB/doc/main/tbb_userguide/estimate_flow_graph_performance.rst
msgid "There is Overhead in Spawning a Node's Body as a Task"
msgstr "При порождении тела узла в качестве задачи возникают накладные расходы"

#: ../../oneTBB/doc/main/tbb_userguide/estimate_flow_graph_performance.rst:42
msgid "The bodies of ``input_nodes``, ``function_nodes``, ``continue_nodes`` and ``multifunction_nodes`` execute within spawned tasks by default. This means that you need to take into account the overhead of task scheduling when estimating the time it takes for a node to execute its body. All of the rules of thumb for determining the appropriate granularity of tasks therefore also apply to node bodies as well. If you have many fine-grained nodes in your flow graph, the impact of these overheads can noticeably impact your performance. However, depending on the graph structure, you can reduce such overheads by using lightweight policy with these nodes."
msgstr "Тела ``input_nodes``, ``function_nodes``, ``continue_nodes`` и ``multifunction_nodes`` по умолчанию выполняются внутри порожденных задач. Это означает, что тебе нужно учитывать накладные расходы на планирование задач при оценке времени, которое требуется узлу для выполнения своего тела. Поэтому все эмпирические правила для определения подходящей детализации задач применимы и к телам узлов. Если у тебя в графе потока много мелкозернистых узлов, влияние этих накладных расходов может заметно сказаться на производительности. Однако, в зависимости от структуры графа, ты можешь уменьшить такие накладные расходы, используя облегченную политику с этими узлами."
