# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Intel Corporation
# This file is distributed under the same license as the oneTBB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: oneTBB\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-23 14:08+0300\n"
"PO-Revision-Date: 2022-05-03 11:04+0300\n"
"Last-Translator: Evgeny <schmidte@list.ru>\n"
"Language-Team: \n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : 2);\n"
"Generated-By: Babel 2.9.1\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:4
msgid "Helper Functions for Expressing Graphs"
msgstr "Вспомогательные функции для выражения графов"

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:7
msgid "To enable this feature, define the ``TBB_PREVIEW_FLOW_GRAPH_FEATURES`` macro to 1."
msgstr "Чтобы включить эту функцию, определи макрос ``TBB_PREVIEW_FLOW_GRAPH_FEATURES`` в 1."

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:9
msgid "Helper functions are intended to make creation of the flow graphs less verbose."
msgstr "Вспомогательные функции предназначены для того, чтобы сделать создание графов потока менее многословным."

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:16
msgid "Description"
msgstr "Описание"

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:18
msgid "This feature adds ``make_edges``, ``make_node_set``, ``follows`` and ``precedes`` functions to ``oneapi::tbb::flow`` namespace. These functions simplify the process of building flow graphs by allowing to gather nodes into sets and connect them to other nodes in the graph."
msgstr "Эта функция добавляет функции ``make_edges``, ``make_node_set``, ``follows`` и ``precedes`` в пространство имен ``oneapi::tbb::flow``. Эти функции упрощают процесс построения графов потоков, позволяя собирать узлы в наборы и соединять их с другими узлами графа."

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:24
msgid "API"
msgstr "API"

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:35
msgid "Example"
msgstr "Пример"

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:37
msgid "Consider the graph depicted below."
msgstr "Рассмотри граф, изображенный ниже."

msgid ".. image:: main/reference/Resources/fg_api_graph_structure.png"
msgstr ".. image:: main/reference/Resources/fg_api_graph_structure.png"

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:42
msgid "In the examples below, C++17 Class Template Argument Deduction is used to avoid template parameter specification where possible."
msgstr "В примерах ниже используется C++17 Class Template Argument Deduction, чтобы по возможности избежать спецификации параметров шаблона."

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:45
msgid "**Regular API**"
msgstr "**Регулярный API**"

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:47
msgid ""
"#include <oneapi/tbb/flow_graph.h>\n"
"\n"
"int main() {\n"
"    using namespace oneapi::tbb::flow;\n"
"\n"
"    graph g;\n"
"\n"
"    broadcast_node<int> input(g);\n"
"\n"
"    function_node doubler(g, unlimited, [](const int& v) { return 2 * v; });\n"
"    function_node squarer(g, unlimited, [](const int&) { return v * v; });\n"
"    function_node cuber(g, unlimited, [](const int& v) { return v * v * v; });\n"
"\n"
"    join_node<std::tuple<int, int, int>> join(g);\n"
"\n"
"    int sum = 0;\n"
"    function_node summer(g, serial, [&](const std::tuple<int, int, int>& v) {\n"
"        int sub_sum = std::get<0>(v) + std::get<1>(v) + std::get<2>(v);\n"
"        sum += sub_sum;\n"
"        return sub_sum;\n"
"    });\n"
"\n"
"    make_edge(input, doubler);\n"
"    make_edge(input, squarer);\n"
"    make_edge(input, cuber);\n"
"    make_edge(doubler, std::get<0>(join.input_ports()));\n"
"    make_edge(squarer, std::get<1>(join.input_ports()));\n"
"    make_edge(cuber, std::get<2>(join.input_ports()));\n"
"    make_edge(join, summer);\n"
"\n"
"    for (int i = 1; i <= 10; ++i) {\n"
"        input.try_put(i);\n"
"    }\n"
"    g.wait_for_all();\n"
"}"
msgstr ""
"#include <oneapi/tbb/flow_graph.h>\n"
"\n"
"int main() {\n"
"    using namespace oneapi::tbb::flow;\n"
"\n"
"    graph g;\n"
"\n"
"    broadcast_node<int> input(g);\n"
"\n"
"    function_node doubler(g, unlimited, [](const int& v) { return 2 * v; });\n"
"    function_node squarer(g, unlimited, [](const int&) { return v * v; });\n"
"    function_node cuber(g, unlimited, [](const int& v) { return v * v * v; });\n"
"\n"
"    join_node<std::tuple<int, int, int>> join(g);\n"
"\n"
"    int sum = 0;\n"
"    function_node summer(g, serial, [&](const std::tuple<int, int, int>& v) {\n"
"        int sub_sum = std::get<0>(v) + std::get<1>(v) + std::get<2>(v);\n"
"        sum += sub_sum;\n"
"        return sub_sum;\n"
"    });\n"
"\n"
"    make_edge(input, doubler);\n"
"    make_edge(input, squarer);\n"
"    make_edge(input, cuber);\n"
"    make_edge(doubler, std::get<0>(join.input_ports()));\n"
"    make_edge(squarer, std::get<1>(join.input_ports()));\n"
"    make_edge(cuber, std::get<2>(join.input_ports()));\n"
"    make_edge(join, summer);\n"
"\n"
"    for (int i = 1; i <= 10; ++i) {\n"
"        input.try_put(i);\n"
"    }\n"
"    g.wait_for_all();\n"
"}"

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:85
msgid "**Preview API**"
msgstr "**Тестовый API**"

#: ../../oneTBB/doc/main/reference/helpers_for_expressing_graphs.rst:87
msgid ""
"#define TBB_PREVIEW_FLOW_GRAPH_FEATURES 1\n"
"#include <oneapi/tbb/flow_graph.h>\n"
"\n"
"int main() {\n"
"    using namespace oneapi::tbb::flow;\n"
"\n"
"    graph g;\n"
"\n"
"    function_node doubler(g, unlimited, [](const int& v) { return 2 * v; });\n"
"    function_node squarer(g, unlimited, [](const int&) { return v * v; });\n"
"    function_node cuber(g, unlimited, [](const int& v) { return v * v * v; });\n"
"\n"
"    auto handlers = make_node_set(doubler, squarer, cuber);\n"
"\n"
"    broadcast_node input(precedes(handlers));\n"
"    join_node join(follows(handlers));\n"
"\n"
"    int sum = 0;\n"
"    function_node summer(follows(join), serial,\n"
"                         [&](const std::tuple<int, int, int>& v) {\n"
"                             int sub_sum = std::get<0>(v) + std::get<1>(v) + std::get<2>(v);\n"
"                             sum += sub_sum;\n"
"                             return sub_sum;\n"
"                         });\n"
"\n"
"    for (int i = 1; i <= 10; ++i) {\n"
"        input.try_put(i);\n"
"    }\n"
"    g.wait_for_all();\n"
"}"
msgstr ""
"#define TBB_PREVIEW_FLOW_GRAPH_FEATURES 1\n"
"#include <oneapi/tbb/flow_graph.h>\n"
"\n"
"int main() {\n"
"    using namespace oneapi::tbb::flow;\n"
"\n"
"    graph g;\n"
"\n"
"    function_node doubler(g, unlimited, [](const int& v) { return 2 * v; });\n"
"    function_node squarer(g, unlimited, [](const int&) { return v * v; });\n"
"    function_node cuber(g, unlimited, [](const int& v) { return v * v * v; });\n"
"\n"
"    auto handlers = make_node_set(doubler, squarer, cuber);\n"
"\n"
"    broadcast_node input(precedes(handlers));\n"
"    join_node join(follows(handlers));\n"
"\n"
"    int sum = 0;\n"
"    function_node summer(follows(join), serial,\n"
"                         [&](const std::tuple<int, int, int>& v) {\n"
"                             int sub_sum = std::get<0>(v) + std::get<1>(v) + std::get<2>(v);\n"
"                             sum += sub_sum;\n"
"                             return sub_sum;\n"
"                         });\n"
"\n"
"    for (int i = 1; i <= 10; ++i) {\n"
"        input.try_put(i);\n"
"    }\n"
"    g.wait_for_all();\n"
"}"
