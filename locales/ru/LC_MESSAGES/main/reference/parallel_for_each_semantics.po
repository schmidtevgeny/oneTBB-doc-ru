# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Intel Corporation
# This file is distributed under the same license as the oneTBB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: oneTBB\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-23 14:08+0300\n"
"PO-Revision-Date: 2022-02-23 15:44+0300\n"
"Last-Translator: Evgeny <schmidte@list.ru>\n"
"Language-Team: \n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : 2);\n"
"Generated-By: Babel 2.9.1\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:4
msgid "parallel_for_each Body semantics and requirements"
msgstr "parallel_for_each Семантика и требования к телу"

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:11
msgid "Description"
msgstr "Описание"

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:13
msgid "This page clarifies `ParallelForEachBody <https://spec.oneapi.com/versions/latest/elements/oneTBB/source/named_requirements/algorithms/par_for_each_body.html>`_ named requirements for ``tbb::parallel_for_each`` algorithm specification."
msgstr "Эта страница разъясняет `ParallelForEachBody <https://spec.oneapi.com/versions/latest/elements/oneTBB/source/named_requirements/algorithms/par_for_each_body.html>`_ именованные требования для спецификации алгоритма ``tbb::parallel_for_each``."

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:16
msgid ""
"namespace oneapi {\n"
"    namespace tbb {\n"
"\n"
"        template <typaname InputIterator, typename Body>\n"
"        void parallel_for_each( InputIterator first, InputIterator last, Body body ); // overload (1)\n"
"        template <typename InputIterator, typename Body>\n"
"        void parallel_for_each( InputIterator first, InputIterator last, Body body, task_group_context& group ); // overload (2)\n"
"\n"
"        template <typename Container, typename Body>\n"
"        void parallel_for_each( Container& c, Body body ); // overload (3)\n"
"        template <typename Container, typename Body>\n"
"        void parallel_for_each( Container& c, Body body, task_group_context& group ); // overload (4)\n"
"\n"
"        template <typename Container, typename Body>\n"
"        void parallel_for_each( const Container& c, Body body ); // overload (5)\n"
"        template <typename Container, typename Body>\n"
"        void parallel_for_each( const Container& c, Body body, task_group_context& group ); // overload (6)\n"
"\n"
"    } // namespace tbb\n"
"} // namespace oneapi"
msgstr ""
"namespace oneapi {\n"
"    namespace tbb {\n"
"\n"
"        template <typaname InputIterator, typename Body>\n"
"        void parallel_for_each( InputIterator first, InputIterator last, Body body ); // overload (1)\n"
"        template <typename InputIterator, typename Body>\n"
"        void parallel_for_each( InputIterator first, InputIterator last, Body body, task_group_context& group ); // overload (2)\n"
"\n"
"        template <typename Container, typename Body>\n"
"        void parallel_for_each( Container& c, Body body ); // overload (3)\n"
"        template <typename Container, typename Body>\n"
"        void parallel_for_each( Container& c, Body body, task_group_context& group ); // overload (4)\n"
"\n"
"        template <typename Container, typename Body>\n"
"        void parallel_for_each( const Container& c, Body body ); // overload (5)\n"
"        template <typename Container, typename Body>\n"
"        void parallel_for_each( const Container& c, Body body, task_group_context& group ); // overload (6)\n"
"\n"
"    } // namespace tbb\n"
"} // namespace oneapi"

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:40
msgid "Terms"
msgstr "Условия"

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:42
msgid "``iterator`` determines the type of the iterator passed into ``parallel_for_each`` algorithm (which is ``InputIterator`` for overloads `(1)` and `(2)` and ``decltype(std::begin(c))`` for overloads `(3) - (6)`)"
msgstr "``iterator`` определяет тип итератора, передаваемого в алгоритм ``parallel_for_each`` (который является ``InputIterator`` для перегрузок `(1)` и `(2)` и ``decltype(std::begin(c))`` для перегрузок `(3) - (6)`)"

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:44
msgid "``value_type`` - the type ``typename std::iterator_traits<iterator>::value_type``"
msgstr "``value_type`` - тип ``typename std::iterator_traits<iterator>::value_type``"

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:45
msgid "``reference`` -  the type ``typename std::iterator_traits<iterator>::reference``."
msgstr "``reference`` -  тип ``typename std::iterator_traits<iterator>::reference``."

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:48
msgid "Requirements for different iterator types"
msgstr "Требования к различным типам итераторов"

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:50
msgid "If the ``iterator`` satisfies `Input iterator` named requirements from [input.iterators] ISO C++ Standard section and do not satisfies `Forward iterator` named requirements from [forward.iterators] ISO C++ Standard section, ``tbb::parallel_for_each`` requires the execution of the ``body`` with an object of type ``const value_type&`` or ``value_type&&`` to be well-formed. If both forms are well-formed, an overload with rvalue reference will be preferred."
msgstr "Если ``iterator`` удовлетворяет требованиям `Input iterator` из раздела [input.iterators] ISO C++ Standard и не удовлетворяет требованиям `Forward iterator` из раздела [forward.iterators] ISO C++ Standard, ``tbb::parallel_for_each`` требует, чтобы выполнение ``body`` с объектом типа ``const value_type&`` или ``value_type&&&`` было хорошо сформировано. Если обе формы хорошо сформированы, предпочтительнее будет перегрузка со ссылкой на rvalue."

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:57
msgid "If the ``Body`` only takes non-const lvalue reference to ``value_type``, named requirements above are violated and the program can be ill-formed."
msgstr "Если ``Body`` принимает только неконстантную ссылку lvalue на ``value_type``, то вышеприведенные требования нарушаются, и программа может быть некорректно сформирована."

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:59
msgid "If the ``iterator`` satisfies `Forward iterator` named requirements from [forward.iterators] ISO C++ Standard section, ``tbb::parallel_for_each`` requires the execution of the ``body`` with an object of type ``reference`` to be well-formed."
msgstr "Если ``iterator`` удовлетворяет требованиям имени `Forward iterator` из раздела [forward.iterators] ISO C++ Standard, ``tbb::parallel_for_each`` требует, чтобы выполнение ``body`` с объектом типа ``reference`` было хорошо сформировано."

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:63
msgid "Requirements for ``Body`` with ``feeder`` argument"
msgstr "Требования к ``Body`` с аргументом ``feeder``"

#: ../../oneTBB/doc/main/reference/parallel_for_each_semantics.rst:65
msgid "Additional elements submitted into ``tbb::parallel_for_each`` through the ``feeder::add`` passes to the ``Body`` as rvalues and therefore the corresponding execution of the ``Body`` is required to be well-formed."
msgstr "Дополнительные элементы, переданные в ``tbb::parallel_for_each`` через ``feeder::add``, передаются в ``Body`` как rvalues и поэтому соответствующее выполнение ``Body`` должно быть хорошо сформировано."
