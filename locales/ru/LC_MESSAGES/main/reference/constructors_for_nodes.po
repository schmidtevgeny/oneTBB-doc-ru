# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Intel Corporation
# This file is distributed under the same license as the oneTBB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: oneTBB\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-23 14:08+0300\n"
"PO-Revision-Date: 2022-02-23 15:45+0300\n"
"Last-Translator: Evgeny <schmidte@list.ru>\n"
"Language-Team: \n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : 2);\n"
"Generated-By: Babel 2.9.1\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:4
msgid "Constructors for Flow Graph nodes"
msgstr "Конструкторы для узлов Flow Graph"

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:7
msgid "To enable this feature, define the ``TBB_PREVIEW_FLOW_GRAPH_FEATURES`` macro to 1."
msgstr ""

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:14
msgid "Description"
msgstr ""

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:16
msgid "The \"Helper Functions for Expressing Graphs\" feature adds a set of new constructors that can be used to construct a node that ``follows`` or ``precedes`` a set of nodes."
msgstr ""

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:19
msgid "Where possible, the constructors support Class Template Argument Deduction (since C++17)."
msgstr ""

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:22
msgid "API"
msgstr ""

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:25
msgid "Header"
msgstr ""

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:27
msgid "#include <oneapi/tbb/flow_graph.h>"
msgstr ""

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:32
msgid "Syntax"
msgstr ""

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:34
msgid ""
"// continue_node\n"
"continue_node(follows(...), Body body, Policy = Policy());\n"
"continue_node(precedes(...), Body body, Policy = Policy());\n"
"\n"
"continue_node(follows(...), int number_of_predecessors, Body body, Policy = Policy());\n"
"continue_node(precedes(...), int number_of_predecessors, Body body, Policy = Policy());\n"
"\n"
"// function_node\n"
"function_node(follows(...), std::size_t concurrency, Policy = Policy());\n"
"function_node(precedes(...), std::size_t concurrency, Policy = Policy());\n"
"\n"
"// input_node\n"
"input_node(precedes(...), body);\n"
"\n"
"// multifunction_node\n"
"multifunction_node(follows(...), std::size_t concurrency, Body body);\n"
"multifunction_node(precedes(...), std::size_t concurrency, Body body);\n"
"\n"
"// async_node\n"
"async_node(follows(...), std::size_t concurrency, Body body);\n"
"async_node(precedes(...), std::size_t concurrency, Body body);\n"
"\n"
"// overwrite_node\n"
"explicit overwrite_node(follows(...));\n"
"explicit overwrite_node(precedes(...));\n"
"\n"
"// write_once_node\n"
"explicit write_once_node(follows(...));\n"
"explicit write_once_node(precedes(...));\n"
"\n"
"// buffer_node\n"
"explicit buffer_node(follows(...));\n"
"explicit buffer_node(precedes(...));\n"
"\n"
"// queue_node\n"
"explicit queue_node(follows(...));\n"
"explicit queue_node(precedes(...));\n"
"\n"
"// priority_queue_node\n"
"explicit priority_queue_node(follows(...), const Compare& comp = Compare());\n"
"explicit priority_queue_node(precedes(...), const Compare& compare = Compare());\n"
"\n"
"// sequencer_node\n"
"sequencer_node(follows(...), const Sequencer& s);\n"
"sequencer_node(precedes(...), const Sequencer& s);\n"
"\n"
"// limiter_node\n"
"limiter_node(follows(...), std::size_t threshold);\n"
"limiter_node(precedes(...), std::size_t threshold);\n"
"\n"
"// broadcast_node\n"
"explicit broadcast_node(follows(...));\n"
"explicit broadcast_node(precedes(...));\n"
"\n"
"// join_node\n"
"explicit join_node(follows(...), Policy = Policy());\n"
"explicit join_node(precedes(...), Policy = Policy());\n"
"\n"
"// split_node\n"
"explicit split_node(follows(...));\n"
"explicit split_node(precedes(...));\n"
"\n"
"// indexer_node\n"
"indexer_node(follows(...));\n"
"indexer_node(precedes(...));"
msgstr ""

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:103
msgid "See Also"
msgstr ""

#: ../../oneTBB/doc/main/reference/constructors_for_nodes.rst:104
msgid ":ref:`follows_precedes`"
msgstr ""
